# PASSED = :blue
# FAILED = :yellow
# require 'autotest/redishgreenish'
require 'autotest/redgreen'
require 'autotest/growl'
# require 'autotest/pretty'
 
module Autotest::Growl
  def self.image_growl title, msg, img, pri=0, stick=""
    cmd = "growlnotify -n autotest --image #{img} -p #{pri} -m #{ msg.inspect} #{title} #{stick}"
    system cmd
  end
  
  Autotest.add_hook :ran_command do |autotest|
  results = [autotest.results].flatten.join("\n")
      output = results.slice(/(\d+)\stests,\s(\d+)\sassertions,\s(\d+)\sfailures,\s(\d+)\serrors/)
      if output
        if $~[3].to_i > 0 || $~[4].to_i > 0
          image_growl "Fail", "#{output}", "~/Library/autotest/rails_fail.png", 2
        else
          image_growl "Pass", "#{output}", "~/Library/autotest/rails_ok.png"
        end
      end
  end
end

Autotest.add_hook :initialize do |at|
  ignore = %w[ .svn .hg .git log plugins script tasks bin CHANGELOG FAQ MIT-LICENSE QUICKLINKS README ]
 
  ignore.each do |exception|
    at.add_exception(exception)
  end
 
  at.clear_mappings
 
  at.add_mapping(%r{^spec/.+_spec\.rb$}) do |filename,_|
    filename
  end
 
  at.add_mapping(%r{^lib/extlib/(.+)\.rb$}) do |_,match|
    [ "spec/#{match[1]}_spec.rb" ]
  end
 
  at.add_mapping(%r{^spec/spec_helper\.rb$}) do
    at.files_matching(%r{^spec/.+_spec\.rb$})
  end
end